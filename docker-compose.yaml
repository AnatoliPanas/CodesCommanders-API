services:
  nginx:
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/:/etc/nginx/conf.d
      - ./html:/usr/share/nginx/html
    depends_on:
      - web
    networks:
      - app_network

  web:
    build: .
    restart: unless-stopped
    working_dir: /app
    command: python manage.py runserver 0.0.0.0:8000

    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SETTINGS_MODULE=proj.settings
    depends_on:
      dbPostgres:
        condition: service_healthy
    networks:
      - app_network

  dbPostgres:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
